#Script to compute AUC when the RN are not extracted. This P is the positive class and unlabelled is the negative class.

old_start <- Sys.time()
args<-commandArgs(T)
library(Matrix);
library(methods) #This is required when running Rscript
library(plyr)
library(foreach)
library(doParallel)
source("/home/WUR/bueno002/chickens035/bmrf_functions.R");
#source("/home/WUR/bueno002/chickens035/validation_functions_chickens_apC.R")
source("/home/WUR/bueno002/chickens035/validation_functions_chickens.R")

#fixed parameters. 
k=2; no_R=20; noit_GS=30
#k=2; no_R=2; noit_GS=5

#Parameters to choose
minGOsize=1
maxGOsize=1
only_EES_BP=T
subset=F
all=T							#Choose [1,2,3,4,5,F], depending on folders: "From_gitHub/large_coex/additional_inputs_and_plots/fileS/" 
reduce="F"		#amg,oa,epp,epn,enn   associationsof my go; other associations; edges of proteins of my go; other edges	
RMO=0
tissue=F
							


GO<-as.numeric(args[1])	
goes_pass_filter<-read.table("take_30goes")
go<<-as.character(goes_pass_filter$V1[GO])


loaded<-return_L_m(subset=subset,minGOsize=minGOsize,maxGOsize=maxGOsize,only_EES_BP=only_EES_BP)
#afterfilter<-colnames(loaded$L_m)




AUCs<-c()
for(i in 1:no_R){
    AUC<-AUCf(go,k,all=all,noit_GS,0)
    print("in this AUC replicate:")
    print(i)
    print(AUC)
    AUCs<-append(AUCs,AUC)
}
meanAUCSs<-mean(AUCs,na.rm=T)
sdAUCSs<-sd(AUCs,na.rm=T)

#write in file
column_name<-as.character(c("'go_number'","'meanAUC'","'sdAUC'"))
#column<-as.character(c(go,sum(my_GO_only),sum(my_GO_only_valid),dim(epp_myGO)[1],dim(epp_myGO_val)[1],dim(epn_myGO)[1],dim(epn_myGO_val)[1],sum(dim(epp_myGO)[1],dim(epn_myGO)[1]),sum(dim(epp_myGO_val)[1],dim(epn_myGO_val)[1]),depth,AUC))
column<-as.character(c(go,meanAUCSs,sdAUCSs))


out.file <- paste("/home/WUR/bueno002/chi35_1GO/AUC/","k2_conv_20r_12424",".txt", sep="")
if(file.exists(out.file)){
	DF<-data.frame(column)
	DF<-t(DF)
	write(DF, file=out.file,ncolumns=length(column),append=T)
} else {
	DF<-data.frame(column_name)
	DF<-t(DF)
	DF<-rbind(DF,column)
	write.table(DF, file=out.file, col.names = F, row.names = F, quote = F, sep="\t")
}


new_end <- Sys.time() - old_start
print(new_end)
print("finished_infochicken!")




